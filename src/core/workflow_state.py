from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field

class AppState(BaseModel):
    """
    The state of the application, managed by Pydantic for type safety and validation.
    """
    user_request: str = Field(description="The user's initial request, which is a travel-related query.")
    
    plan: Optional[Dict[str, Any]] = Field(default=None, description="The execution plan generated by the planning agent to address the travel query.")
    
    perception_data: Optional[Dict[str, Any]] = Field(default=None, description="Data collected by the perception agent, such as relevant travel information or user preferences.")
    
    market_commentary: Optional[str] = Field(default=None, description="Market commentary generated by the decision agent, analyzing travel market trends.")
    
    features_for_forecasting: Optional[List[str]] = Field(default=None, description="Features selected for the travel forecasting model.")
    
    forecast_result: Optional[Dict[str, Any]] = Field(default=None, description="The final travel forecast result.")

    # New fields for dynamic workflow control
    next_step: Optional[str] = Field(default=None, description="The next agent to execute for dynamic workflow control.")
    error_message: Optional[str] = Field(default=None, description="Any error message that occurred during the process.")